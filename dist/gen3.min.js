/**
 * Gen3: A utility for managing and computing interdependent values within a tree.
 *
 * @copyright 2023 Claus Nuoskanen
 * @author Claus Nuoskanen <claus.nuoskanen@gmail.com>
 * @license MIT
 */
export default class Gen3{constructor(){this.fnMap=new Map}define(key,fn,dependencies){if(this.fnMap.has(key))throw new Error(`"${key}" is already defined!`);dependencies===null||dependencies===void 0?void 0:dependencies.forEach((dependency=>{if(!this.fnMap.has(dependency))throw new Error(`Dependency "${dependency}" has not been defined yet!`)}));this.fnMap.set(key,dependencies?this.wrapWithDependencies(fn,dependencies):fn);return this}get(key,param){var _a;const fn=this.fnMap.get(key);if(!fn)throw new Error(`ComputeFunction "${key}" is not defined!`);param.parent=(_a=param.parent)!==null&&_a!==void 0?_a:{};if(param.parent[key])return param.value[key];param.parent[key]=fn(param);return param.parent[key]}wrapWithDependencies(fn,dependencies){return param=>fn(Object.assign(Object.assign({},param),{value:dependencies.reduce(((acc,name)=>{acc[name]=this.get(name,param);return acc}),{})}))}}